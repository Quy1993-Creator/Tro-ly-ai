import streamlit as st
from openai import OpenAI
import os
import base64
import tempfile
from PIL import Image
import io
import fitz  # PyMuPDF for PDF processing

# H√†m ƒë·ªçc n·ªôi dung t·ª´ file vƒÉn b·∫£n
def rfile(name_file):
    with open(name_file, "r", encoding="utf-8") as file:
        return file.read()

# H√†m chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh th√†nh base64
def image_to_base64(image):
    buffered = io.BytesIO()
    image.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode("utf-8")

# H√†m x·ª≠ l√Ω file PDF ƒë·ªÉ tr√≠ch xu·∫•t text v√† h√¨nh ·∫£nh
def process_pdf(pdf_file):
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        tmp.write(pdf_file.getvalue())
        tmp_path = tmp.name
    
    # M·ªü PDF v·ªõi PyMuPDF
    pdf_document = fitz.open(tmp_path)
    pdf_text = ""
    pdf_images = []
    
    # L·∫∑p qua t·ª´ng trang ƒë·ªÉ tr√≠ch xu·∫•t text v√† h√¨nh ·∫£nh
    for page_num in range(len(pdf_document)):
        page = pdf_document[page_num]
        
        # Tr√≠ch xu·∫•t text
        pdf_text += page.get_text() + "\n\n"
        
        # Tr√≠ch xu·∫•t h√¨nh ·∫£nh
        images = page.get_images(full=True)
        for img_index, img_info in enumerate(images):
            xref = img_info[0]
            base_image = pdf_document.extract_image(xref)
            image_bytes = base_image["image"]
            
            # Chuy·ªÉn th√†nh ƒë·ªëi t∆∞·ª£ng PIL Image
            try:
                image = Image.open(io.BytesIO(image_bytes))
                pdf_images.append(image)
            except Exception as e:
                st.error(f"Kh√¥ng th·ªÉ x·ª≠ l√Ω h√¨nh ·∫£nh trong PDF: {e}")
    
    # ƒê√≥ng t√†i li·ªáu PDF v√† x√≥a file t·∫°m
    pdf_document.close()
    os.unlink(tmp_path)
    
    return pdf_text, pdf_images

# Hi·ªÉn th·ªã logo (n·∫øu c√≥)
try:
    col1, col2, col3 = st.columns([3, 2, 3])
    with col2:
        st.image("logo.png", use_container_width=True)
except:
    pass

# Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
title_content = rfile("00.xinchao.txt")
st.markdown(
    f"""<h1 style="text-align: center; font-size: 24px;">{title_content}</h1>""",
    unsafe_allow_html=True
)

# L·∫•y OpenAI API key t·ª´ st.secrets
openai_api_key = st.secrets.get("OPENAI_API_KEY")

# Kh·ªüi t·∫°o OpenAI client
client = OpenAI(api_key=openai_api_key)

# Kh·ªüi t·∫°o tin nh·∫Øn "system" v√† "assistant"
INITIAL_SYSTEM_MESSAGE = {"role": "system", "content": rfile("01.system_trainning.txt")}
INITIAL_ASSISTANT_MESSAGE = {"role": "assistant", "content": rfile("02.assistant.txt")}

# Ki·ªÉm tra n·∫øu ch∆∞a c√≥ session l∆∞u tr·ªØ th√¨ kh·ªüi t·∫°o tin nh·∫Øn ban ƒë·∫ßu
if "messages" not in st.session_state:
    st.session_state.messages = [INITIAL_SYSTEM_MESSAGE, INITIAL_ASSISTANT_MESSAGE]

# CSS ƒë·ªÉ cƒÉn ch·ªânh tr·ª£ l√Ω b√™n tr√°i, ng∆∞·ªùi h·ªèi b√™n ph·∫£i, v√† th√™m icon tr·ª£ l√Ω
st.markdown(
    """
    <style>
        .assistant {
            padding: 10px;
            border-radius: 10px;
            max-width: 75%;
            background: none; /* M√†u trong su·ªët */
            text-align: left;
        }
        .user {
            padding: 10px;
            border-radius: 10px;
            max-width: 75%;
            background: none; /* M√†u trong su·ªët */
            text-align: right;
            margin-left: auto;
        }
        .assistant::before { content: "ü§ñ "; font-weight: bold; }
        .file-upload {
            padding: 10px;
            border-radius: 10px;
            max-width: 75%;
            background-color: #f0f2f6;
            text-align: left;
        }
        .uploaded-image {
            max-width: 100%;
            border-radius: 5px;
            margin-top: 10px;
        }
    </style>
    """,
    unsafe_allow_html=True
)

# Hi·ªÉn th·ªã l·ªãch s·ª≠ tin nh·∫Øn (lo·∫°i b·ªè system ƒë·ªÉ tr√°nh hi·ªÉn th·ªã)
for message in st.session_state.messages:
    if message["role"] == "assistant":
        st.markdown(f'<div class="assistant">{message["content"]}</div>', unsafe_allow_html=True)
    elif message["role"] == "user":
        # Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·ª©a h√¨nh ·∫£nh kh√¥ng
        if "image_data" in message:
            st.markdown(f'<div class="user">{message["content"]}</div>', unsafe_allow_html=True)
            st.image(message["image_data"], caption="Uploaded Image", use_column_width=True)
        # Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·ª©a th√¥ng tin PDF kh√¥ng
        elif "pdf_text" in message:
            st.markdown(f'<div class="user">{message["content"]}</div>', unsafe_allow_html=True)
            with st.expander("Xem n·ªôi dung PDF"):
                st.write(message["pdf_text"])
                if "pdf_images" in message and message["pdf_images"]:
                    st.write("H√¨nh ·∫£nh t·ª´ PDF:")
                    for i, img in enumerate(message["pdf_images"]):
                        st.image(img, caption=f"PDF Image {i+1}", use_column_width=True)
        else:
            st.markdown(f'<div class="user">{message["content"]}</div>', unsafe_allow_html=True)

# Khu v·ª±c upload file
st.sidebar.title("Upload files")
uploaded_file = st.sidebar.file_uploader("Choose an image or PDF file", type=["jpg", "jpeg", "png", "pdf"])

if uploaded_file is not None:
    file_content = ""
    file_type = uploaded_file.type
    
    # X·ª≠ l√Ω h√¨nh ·∫£nh
    if file_type in ["image/jpeg", "image/png", "image/jpg"]:
        image = Image.open(uploaded_file)
        st.sidebar.image(image, caption="Uploaded Image", use_column_width=True)
        
        # Chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh th√†nh base64 ƒë·ªÉ g·ª≠i t·ªõi API
        base64_image = image_to_base64(image)
        file_content = f"[User uploaded an image]"
        
        # T·∫°o tin nh·∫Øn g·ª≠i cho AI
        if st.sidebar.button("Process Image"):
            user_message = "ƒê√¢y l√† h√¨nh ·∫£nh m√† t√¥i v·ª´a upload. Vui l√≤ng ph√¢n t√≠ch v√† m√¥ t·∫£ n√≥."
            
            # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng k√®m h√¨nh ·∫£nh v√†o session
            st.session_state.messages.append({
                "role": "user", 
                "content": user_message,
                "image_data": image
            })
            
            # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng tr√™n giao di·ªán
            st.markdown(f'<div class="user">{user_message}</div>', unsafe_allow_html=True)
            st.image(image, caption="Uploaded Image", use_column_width=True)
            
            # G·ª≠i tin nh·∫Øn k√®m h√¨nh ·∫£nh t·ªõi API
            messages_for_api = [{"role": m["role"], "content": m["content"]} for m in st.session_state.messages 
                               if "image_data" not in m or m["role"] != "user"]
            
            # Th√™m tin nh·∫Øn cu·ªëi c√πng v·ªõi h√¨nh ·∫£nh
            messages_for_api.append({
                "role": "user",
                "content": [
                    {"type": "text", "text": user_message},
                    {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{base64_image}"}}
                ]
            })
            
            # T·∫°o ph·∫£n h·ªìi t·ª´ API OpenAI (model h·ªó tr·ª£ x·ª≠ l√Ω h√¨nh ·∫£nh)
            model_name = rfile("module_chatgpt.txt").strip()
            
            # Ki·ªÉm tra n·∫øu model kh√¥ng h·ªó tr·ª£ vision
            if "vision" not in model_name and "gpt-4" not in model_name:
                response = "Xin l·ªói, model hi·ªán t·∫°i kh√¥ng h·ªó tr·ª£ ph√¢n t√≠ch h√¨nh ·∫£nh. Vui l√≤ng s·ª≠ d·ª•ng model gpt-4-vision-preview ho·∫∑c t∆∞∆°ng t·ª±."
                st.markdown(f'<div class="assistant">{response}</div>', unsafe_allow_html=True)
                st.session_state.messages.append({"role": "assistant", "content": response})
            else:
                # G·ªçi API v·ªõi multimodal
                response = ""
                try:
                    stream = client.chat.completions.create(
                        model=model_name,
                        messages=messages_for_api,
                        stream=True,
                        max_tokens=1000
                    )
                    
                    # Ghi l·∫°i ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω v√†o bi·∫øn
                    for chunk in stream:
                        if chunk.choices:
                            content = chunk.choices[0].delta.content
                            if content:
                                response += content
                    
                    # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω
                    st.markdown(f'<div class="assistant">{response}</div>', unsafe_allow_html=True)
                    
                    # C·∫≠p nh·∫≠t l·ªãch s·ª≠ tin nh·∫Øn trong session
                    st.session_state.messages.append({"role": "assistant", "content": response})
                except Exception as e:
                    st.error(f"Error with OpenAI API: {str(e)}")
    
    # X·ª≠ l√Ω PDF
    elif file_type == "application/pdf":
        st.sidebar.write("PDF uploaded successfully!")
        
        # X·ª≠ l√Ω PDF ƒë·ªÉ tr√≠ch xu·∫•t text v√† h√¨nh ·∫£nh
        pdf_text, pdf_images = process_pdf(uploaded_file)
        
        # Hi·ªÉn th·ªã PDF preview trong sidebar
        with st.sidebar.expander("PDF Preview"):
            st.write(pdf_text[:500] + "..." if len(pdf_text) > 500 else pdf_text)
            if pdf_images:
                st.image(pdf_images[0], caption="First image from PDF", use_column_width=True)
        
        # T·∫°o tin nh·∫Øn g·ª≠i cho AI
        if st.sidebar.button("Process PDF"):
            user_message = "ƒê√¢y l√† n·ªôi dung PDF m√† t√¥i v·ª´a upload. Vui l√≤ng ph√¢n t√≠ch v√† t√≥m t·∫Øt n√≥."
            
            # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng k√®m th√¥ng tin PDF v√†o session
            st.session_state.messages.append({
                "role": "user", 
                "content": user_message,
                "pdf_text": pdf_text,
                "pdf_images": pdf_images
            })
            
            # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng tr√™n giao di·ªán
            st.markdown(f'<div class="user">{user_message}</div>', unsafe_allow_html=True)
            with st.expander("Xem n·ªôi dung PDF"):
                st.write(pdf_text)
                if pdf_images:
                    st.write("H√¨nh ·∫£nh t·ª´ PDF:")
                    for i, img in enumerate(pdf_images):
                        st.image(img, caption=f"PDF Image {i+1}", use_column_width=True)
            
            # G·ª≠i text t·ª´ PDF t·ªõi API
            messages_for_api = [{"role": m["role"], "content": m["content"]} for m in st.session_state.messages 
                               if "pdf_text" not in m or m["role"] != "user"]
            
            # Th√™m tin nh·∫Øn cu·ªëi c√πng v·ªõi n·ªôi dung PDF
            messages_for_api.append({
                "role": "user",
                "content": f"{user_message}\n\nN·ªôi dung PDF:\n{pdf_text[:4000] if len(pdf_text) > 4000 else pdf_text}"
            })
            
            # T·∫°o ph·∫£n h·ªìi t·ª´ API OpenAI
            response = ""
            try:
                stream = client.chat.completions.create(
                    model=rfile("module_chatgpt.txt").strip(),
                    messages=messages_for_api,
                    stream=True,
                    max_tokens=1500
                )
                
                # Ghi l·∫°i ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω v√†o bi·∫øn
                for chunk in stream:
                    if chunk.choices:
                        content = chunk.choices[0].delta.content
                        if content:
                            response += content
                
                # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω
                st.markdown(f'<div class="assistant">{response}</div>', unsafe_allow_html=True)
                
                # C·∫≠p nh·∫≠t l·ªãch s·ª≠ tin nh·∫Øn trong session
                st.session_state.messages.append({"role": "assistant", "content": response})
            except Exception as e:
                st.error(f"Error with OpenAI API: {str(e)}")

# √î nh·∫≠p li·ªáu cho ng∆∞·ªùi d√πng
if prompt := st.chat_input("B·∫°n nh·∫≠p n·ªôi dung c·∫ßn trao ƒë·ªïi ·ªü ƒë√¢y nh√©?"):
    # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v√†o session
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.markdown(f'<div class="user">{prompt}</div>', unsafe_allow_html=True)

    # T·∫°o ph·∫£n h·ªìi t·ª´ API OpenAI
    response = ""
    stream = client.chat.completions.create(
        model=rfile("module_chatgpt.txt").strip(),
        messages=[{"role": m["role"], "content": m["content"]} for m in st.session_state.messages],
        stream=True,
    )

    # Ghi l·∫°i ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω v√†o bi·∫øn
    for chunk in stream:
        if chunk.choices:
            content = chunk.choices[0].delta.content
            if content:
                response += content

    # Hi·ªÉn th·ªã ph·∫£n h·ªìi c·ªßa tr·ª£ l√Ω